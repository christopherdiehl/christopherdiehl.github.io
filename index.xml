<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christopher Diehl</title>
    <link>https://christopherdiehl.github.io/</link>
    <description>Recent content on Christopher Diehl</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/christopherdiehl&#34;&gt;Christopher Diehl&lt;/a&gt; 2022</copyright>
    <lastBuildDate>Sat, 27 Nov 2021 08:02:46 -0500</lastBuildDate>
    
	<atom:link href="https://christopherdiehl.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dots Limited</title>
      <link>https://christopherdiehl.github.io/posts/dots-limited/</link>
      <pubDate>Sat, 27 Nov 2021 08:02:46 -0500</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/dots-limited/</guid>
      <description>Like most of the world, I&amp;rsquo;ve become more interested in NFTs over the past few months. From billion dollar behemoths like BAYC to new entrants like Bushidos the space is booming and shows no time of slowing down in the immediate future. Realizing the growth potential in the space, I decided to sit down and make some NFTs of my own. Only one problem presented itself - how do I make the JPEGs to mint?</description>
    </item>
    
    <item>
      <title>Optimizing text search SQL queries on a Raleigh crime dataset</title>
      <link>https://christopherdiehl.github.io/posts/sql-optimizations-2/</link>
      <pubDate>Sat, 08 Feb 2020 07:24:44 -0500</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/sql-optimizations-2/</guid>
      <description>This post builds upon the previous post. If you haven&amp;rsquo;t checked it out already, please do so here In my opinion, SQL is easy to get working initially, but optimizing SQL is a whole different beast. Thankfully, I recently had the chance to optimize a whole bunch of SQL for one of our critical platforms resulting in an over 300% reduction in execution time. While I can&amp;rsquo;t promise the same result for anyone following this article, I do outline some of my learnings on optimizing for queries on text columns below using the most recent Raleigh Crime dataset.</description>
    </item>
    
    <item>
      <title>Examining Raleigh&#39;s crime data using SQL</title>
      <link>https://christopherdiehl.github.io/posts/sql-optimizations/</link>
      <pubDate>Thu, 23 Jan 2020 14:16:20 +0000</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/sql-optimizations/</guid>
      <description>Background I&amp;rsquo;ve had the pleasure of working on a lot of different projects and while the language may have ranged from Java to Golang, most have communicated with a database using SQL. In the beginning of my career, I viewed SQL as a unfortunate neccessity, Professor Imilienski at Rutgers changed my opinion. His project and lectures showed us how to view the and analyze datasets in a relational database, and how SQL can be used to gather some pretty powerful insights.</description>
    </item>
    
    <item>
      <title>Browser Fingerprinting</title>
      <link>https://christopherdiehl.github.io/posts/browser-fingerprinting/</link>
      <pubDate>Sun, 19 Jan 2020 14:16:20 +0000</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/browser-fingerprinting/</guid>
      <description>With great power comes great responsibility. Browser fingerprinting is a great power, but unfortunately is not often used responsibly. In fact, companies routinely use the technique to identify with 99% accuracy who the individual browsing their site is. This allows tailored ads to a specific demographic. Perhaps the best use case for browser fingerprinting comes in the form of analytics for site developers. If the developers know what devices and browsers are frequenting the site, they can improve and test for those specific browsers and screen sizes.</description>
    </item>
    
    <item>
      <title>Bringing some more speed to cloudformation</title>
      <link>https://christopherdiehl.github.io/posts/cloudspeed/</link>
      <pubDate>Sat, 04 May 2019 08:29:06 -0400</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/cloudspeed/</guid>
      <description>After working extensively with AWS Cloudformation the last couple of months, I have noticed that template debugging and creation is not overly fast. To help ease development burden, I have created cloudspeed which aims to bring some more speed to cloudformation by introducing automatic creation/deletion of templates in addition to event traces on creation failure.
To help get started with cloudspeed, I have provided a high level overview of cloudformation and infrastructure as code to outline what the service does and why it is helpful.</description>
    </item>
    
    <item>
      <title>Isalive</title>
      <link>https://christopherdiehl.github.io/posts/isalive/</link>
      <pubDate>Fri, 22 Feb 2019 08:16:52 -0500</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/isalive/</guid>
      <description>Building a HTTP monitoring cli appliclation with notifications via Gmail. Due to the multi-role nature of startups, I tend to tackle a lot of the infrastructure and DevOps related tooling and management in addition to my more standard development work. To help monitor all of the various services and to experiment with Golang, I&amp;rsquo;ve created an easy-to-use CLI application that can send an email if an endpoint returns a non 200 status code.</description>
    </item>
    
    <item>
      <title>Issa Vibe</title>
      <link>https://christopherdiehl.github.io/posts/issa-vibe/</link>
      <pubDate>Fri, 09 Nov 2018 09:57:27 -0500</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/issa-vibe/</guid>
      <description>Building a music suggesting webapp in barebones Go For some additional background, the team I work with has a weekly Talking Code where one member talks about something they&amp;rsquo;ve worked on and would like to share with the group. Given my interest in Golang outside of work, I decided to make a web application that would randomly suggest a song given a genre. I also wanted to use as few libraries as possible to hide any package magic.</description>
    </item>
    
    <item>
      <title>Dynamically passing in ENV vars to Lambda functions created by Cloudformation</title>
      <link>https://christopherdiehl.github.io/posts/lambda-sam-env-vars/</link>
      <pubDate>Fri, 17 Aug 2018 14:16:20 +0000</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/lambda-sam-env-vars/</guid>
      <description>Background I&amp;rsquo;m going to assume you have experience with Lambda, AWS-SAM, and Cloudformation. To start with you should already have a template.yml for Cloudformation that looks alot like this:
--- AWSTemplateFormatVersion: &#39;2010-09-09&#39; Transform: AWS::Serverless-2016-10-31 Description: AWS template Resources: ApiGatewayApi: Type: AWS::Serverless::Api Properties: StageName: Prod # Allows www.example.com to call these APIs # SAM will automatically add AllowMethods with a list of methods for this API Cors: &amp;quot;&#39;www.example.com&#39;&amp;quot; DefinitionBody: &#39;Fn::Transform&#39;: Name: &#39;AWS::Include&#39; # Replace &amp;lt;bucket&amp;gt; with your bucket name Parameters: Location: s3://&amp;lt;bucket&amp;gt;/swagger.</description>
    </item>
    
    <item>
      <title>Creating a Brute Force REST API Password Cracker</title>
      <link>https://christopherdiehl.github.io/posts/golang-brute-force-password-cracker/</link>
      <pubDate>Sun, 24 Jun 2018 07:49:00 -0400</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/golang-brute-force-password-cracker/</guid>
      <description>Golang Password Cracker Disclaimer All views and opinions expressed in this document are my own and not indicative of my employer&amp;rsquo;s viewpoints in any regard. Furthermore, this exercise is intended to demonstrate the need for more robust passwords. The created program should not be used for anything malicious.
Password Security &amp;amp; Best Practices Krebs Take
I&amp;rsquo;m sure we&amp;rsquo;ve all seen user accounts with shoddy passwords, to demonstrate how easy it is to gain access to these accounts let&amp;rsquo;s see if we can brute force their passwords.</description>
    </item>
    
    <item>
      <title>Create Filter Bar React Redux Reselect</title>
      <link>https://christopherdiehl.github.io/posts/create-filter-bar-react-redux/</link>
      <pubDate>Tue, 13 Mar 2018 07:49:00 -0400</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/create-filter-bar-react-redux/</guid>
      <description>Intro I recently created a filter bar using the popular Reselect and Redux libraries in React. For this post, we&amp;rsquo;re going to create a filter bar in a standard contacts page, where the contacts will be filtered by individual&amp;rsquo;s name.
Here is an example of how the contacts page will look with the filter.
Reducer Setup First we need to create the reducer and the initial state of our application, let&amp;rsquo;s use Immutable.</description>
    </item>
    
    <item>
      <title>Golang Configure Cors REST API</title>
      <link>https://christopherdiehl.github.io/posts/golang-configure-cors-log/</link>
      <pubDate>Tue, 27 Feb 2018 16:45:26 -0500</pubDate>
      
      <guid>https://christopherdiehl.github.io/posts/golang-configure-cors-log/</guid>
      <description>Intro I recently ran into some CORS issues while creating a REST API in Go. Because I spend the bulk of my time programming in JavaScript, I had at first assumed there would be an easy catch all CORS package that I could configure and never think about again. Then I remembered that part of Go&amp;rsquo;s beauty is it&amp;rsquo;s standard library, so I decided to solve the problem by myself, and while doing so learned a lot about HTTP and CORS.</description>
    </item>
    
  </channel>
</rss>